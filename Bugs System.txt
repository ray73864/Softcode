CREATE TABLE tblBugReport (
	bug_id int(11) NOT NULL auto_increment, 
	assigned_to VARCHAR(20) NOT NULL, 
	category varchar(100) NOT NULL default 'general', 
	resolved int(11) default '0',
	resolved_by varchar(20) default NULL,
	resolved_date INT default NULL,
	reported_by varchar(20) NOT NULL,
	location varchar(16) NOT NULL,
	zone varchar(16) NOT NULL,
	report_start INT NOT NULL, 
	bug_details text NOT NULL,
	PRIMARY KEY  (bug_id),
	FULLTEXT KEY category_2 (category)
) ENGINE=MyISAM;

CREATE TABLE tblBugComment (
	comment_id int(11) NOT NULL auto_increment,
	bug_id int(11) NOT NULL,
	comment_by varchar(20) NOT NULL,
	comment_date INT NOT NULL,
	comment text NOT NULL,
	PRIMARY KEY  (comment_id), 
	KEY bug_id (bug_id)
) ENGINE=MyISAM;

&FUN`BUGS Master Function Object=if(hasattr(#202, fun_%0),u(#202/fun_%0,%1,%2,%3,%4,%5,%6,%7,%8,%9),prefix([ansi(r,No such bugs function.)],setr(C,get(#202/VC)),setr(N,get(#202/VN)))%r[prefix(ansi(c,Available functions)[ansi(hx,:)]%b[itemize(edit(lattr(#202/fun_*),FUN_,))],%qC,%qN)])

@create $--:Sql Object: Bug Reporter
@power $--:Sql Object: Bug Reporter = SQL_OK
@DESCRIBE $--:Sql Object: Bug Reporter=%r[ansi(c,Bug Reporting System developed by Cerekk and qa'toq for Star Trek: Foundations (bdv.foundationsmush.com 1701). Available for use with credits intact.)]%r
&SQL $--:Sql Object: Bug Reporter=
&SQL`COUNT $--:Sql Object: Bug Reporter=
&SQL`COUNTALL $--:Sql Object: Bug Reporter=sql(SELECT COUNT(*) FROM %vr)
&SQL`COUNTCURRENT $--:Sql Object: Bug Reporter=sql(SELECT COUNT(*) FROM %vr WHERE resolved=0)
&SQL`COUNTRESOLVED $--:Sql Object: Bug Reporter=sql(SELECT COUNT(*) FROM %vr WHERE resolved=1)
&SQL`INSERT $--:Sql Object: Bug Reporter=
&SQL`INSERT`BUG $--:Sql Object: Bug Reporter=sql(INSERT INTO %vr (reported_by,location,zone,report_start,bug_details) VALUES ("%0","%1","%2","%3","[sqlescape(%4)]")
&SQL`INSERT`COMMENT $--:Sql Object: Bug Reporter=sql(INSERT INTO %vx (bug_id, comment_by, comment_date, comment) VALUES (%0, "%1", "%2", "[sqlescape(%3)]")
&SQL`SELECT $--:Sql Object: Bug Reporter=
&SQL`SELECT`BUGEXISTS $--:Sql Object: Bug Reporter=sql(SELECT Count(*) FROM %vr WHERE bug_id=%0)
&SQL`SELECT`COMMENTSBYBUG $--:Sql Object: Bug Reporter=sql(SELECT Count(*) FROM %vx WHERE bug_id=%0)
&SQL`SELECT`GET`ALLBUGS $--:Sql Object: Bug Reporter=sql({SELECT bug_id, resolved, reported_by, location FROM %vr ORDER BY bug_id ASC},~,|)
&SQL`SELECT`GET`ALLBUGS_LIMITED $--:Sql Object: Bug Reporter=sql({SELECT bug_id, resolved, reported_by, location FROM %vr ORDER BY bug_id ASC LIMIT %0,%1},~,|)
&SQL`SELECT`GET`COMMENTS_BY_BUG $--:Sql Object: Bug Reporter=SELECT comment_id, comment_by, comment_date, comment FROM %vx WHERE bug_id=%0
&SQL`SELECT`GET`CURRENTBUGS $--:Sql Object: Bug Reporter=SELECT r.bug_id, r.reported_by, r.location, r.bug_details, COUNT(c.bug_id) FROM %vr r LEFT JOIN %vx c ON c.Bug_ID = r.bug_id WHERE r.resolved = 0 ORDER BY r.bug_id ASC
&SQL`SELECT`GET`CURRENTBUGSWITHCAT $--:Sql Object: Bug Reporter=sql({SELECT bug_id, reported_by, location FROM %vr WHERE resolved=0 AND category='%0'},~,|)
&SQL`SELECT`GET`LASTPOST $--:Sql Object: Bug Reporter=sql(SELECT bug_id FROM %vr ORDER BY bug_id DESC LIMIT 1)
&SQL`SELECT`GET`RESOLVEDBUGS $--:Sql Object: Bug Reporter=sql({SELECT bug_id, reported_by, location, bug_details FROM %vr WHERE resolved=1},~,|)
&SQL`SELECT`GET`THISBUG $--:Sql Object: Bug Reporter=sql({SELECT bug_id, resolved, resolved_by, resolved_date, reported_by, location, zone, report_start FROM %vr WHERE bug_id=%0},~,|)
&SQL`SELECT`GET`THISBUG_DETAILS $--:Sql Object: Bug Reporter=sql({SELECT bug_details FROM %vr WHERE bug_id=%0})
&SQL`SELECT`GET`THISBUG_FULL $--:Sql Object: Bug Reporter=sql({SELECT bug_id, resolved, resolved_by, resolved_date, reported_by, location, zone, report_start, bug_details FROM %vr WHERE bug_id=%0},,|)
&SQL`UPDATE $--:Sql Object: Bug Reporter=
&SQL`UPDATE`RESOLVE $--:Sql Object: Bug Reporter=sql({UPDATE %vr SET resolved=1, resolved_by='%1', resolved_date='%2' WHERE bug_id='%0'})
@VC $--:Sql Object: Bug Reporter=xR
@VN $--:Sql Object: Bug Reporter=Bug Reporter v3.0 (SQL)
@VP $--:Sql Object: Bug Reporter=25
@VR $--:Sql Object: Bug Reporter = tblBugReport
@VX $--:Sql Object: Bug Reporter = tblBugComment

@create $--: Function Object: Bug System
@set $--: Function Object: Bug System = WIZARD
@parent $--: Function Object: Bug System = $--:Sql Object: Bug Reporter
&FMT_COMMENT $--: Function Object: Bug System = nspemit(%#,prefix({USAGE: bugs\(comment,<bug_id>,<comment_by_objid>,<comment_date_secs>,<comment>\)},%vc,%vn))
&FMT_CREATE $--: Function Object: Bug System = nspemit(%#,prefix({USAGE: bugs(create,<report_by_objid>,<location_objid>,<zone_objid>,<report_start_secs>,<bug_details>)},%vc,%vn))
&FMT_GETBUG $--: Function Object: Bug System = nspemit(%#,prefix({USAGE: bugs\(getbug,<bug_id>\)},%vc,%vn))
&FMT_RESOLVE $--: Function Object: Bug System = nspemit(%#,prefix({USAGE: bugs\(resolve,<bug_id>,<resolved_by>,<resolve_date_secs>,<resolve message>\)},%vc,%vn))

&FUN_COMMENT $--: Function Object: Bug System = [if(u(VAL_COMMENT,%0,%1,%2,%3),[if(u(VAL_VALIDBUG,%0),[u(SQL`INSERT`COMMENT,%0,%1,%2,%3)][nspemit(%#,prefix(Comment added to bug #%0.,%vc,%vn))][cemit(Admin,[ansi(hy,%n)] [ansi(c,has added a comment to bug)] [ansi(hx,#)][ansi(hy,%0)][ansi(hx,.)],noisy)])])]
&FUN_CREATE $--: Function Object: Bug System = [if(u(VAL_CREATE,%0,%1,%2,%3,%4),u(SQL`INSERT`BUG,%0,%1,%2,%3,{%4})[nspemit(%#,prefix(Bug report submitted.,%vc,%vn))][cemit(admin,%n has filed a new bug report. #[u(SQL`SELECT`GET`LASTPOST)],noisy)])]
&FUN_GETBUG $--: Function Object: Bug System = [if(u(VAL_GETBUG,%0),[if(u(VAL_VALIDBUG,%0),u(SQL`SELECT`GET`THISBUG_FULL,%0))])]
&FUN_RESOLVE $--: Function Object: Bug System = [if(u(VAL_RESOLVE,%0,%1,%2,%3),[if(u(VAL_VALIDBUG,%0),[u(SQL`UPDATE`RESOLVE,%0,%1,%2)][bugs(comment,%0,%1,%2,%3)][mailsend(extract(u(SQL`SELECT`GET`THISBUG,%0),5,1,|),Bug Report #%0/Your Bug report has been resolved by %n.%r%rOriginal Bug Report:%r%r%t{[u(SQL`SELECT`GET`THISBUG_DETAILS,%0)]}%r%rThe resolution to this request was: %r%r%t{%3})][cemit(admin,[ansi(hy,%n)]%b[ansi(c,has marked bug)]%b[ansi(hx,#)][ansi(hy,%0)]%b[ansi(c,as resolved. \(Comment Added\))],noisy)][nspemit(%#,prefix(Bug #%0 marked as resolved.,%vc,%vn))])])]

&MSG_INVALIDBUG $--: Function Object: Bug System = nspemit(%#,prefix(That is not a valid bug number.,%vc,%vn))

&VAL_COMMENT $--: Function Object: Bug System = [if(and(isint(%0),isobjid(%1),isint(%2),t(%3)),1,u(FMT_COMMENT))]
&VAL_CREATE $--: Function Object: Bug System = [if(and(isobjid(%0),isobjid(%1),isobjid(%2),isint(%3),t(%4)),1,u(FMT_CREATE))]
&VAL_GETBUG $--: Function Object: Bug System = [if(isint(%0),1,u(FMT_GETBUG))]
&VAL_RESOLVE $--: Function Object: Bug System = [if(and(isint(%0),isobjid(%1),isint(%2),t(%3)),1,u(FMT_RESOLVE))]
&VAL_VALIDBUG $--: Function Object: Bug System = [if(u(SQL`SELECT`BUGEXISTS,%0),1,u(MSG_INVALIDBUG))]

@create $--: Bug System (Admin)
@parent $--: Bug System (Admin)=$--:Sql Object: Bug Reporter
@lock/use $--: Bug System (Admin)=flag^ROYALTY|flag^WIZARD
@set $--: Bug System (Admin) = WIZARD
@set $--: Bug System (Admin) = NO_LOG
@set $--: Bug System (Admin) = SYSTEM
&CMD_LIST $--: Bug System (Admin)=$@bugs:@nspemit %#=[header(ansi(wh,%vn),,Condensed Bug List,width(%#),%vc)]%r%r[if(u(SQL`COUNTCURRENT),mapsql(FUN_BUGLIST,u(SQL`SELECT`GET`CURRENTBUGS),%r),ansi(r,No Unresolved bugs found.))]%r%r[header(%?,Unresolved Bugs: [u(SQL`COUNTCURRENT)],time(),width(%#),%vc)]
&CMD_COMMENTBUG $--: Bug System (Admin)=$@bug/comment *=*:th [bugs(comment,%0,%:,secs(),{%1})]
&CMD_DELETEBUG $--: Bug System (Admin)=$@bug/delete *:@assert isint(%0)={@nspemit %#=To delete a bug you must provide a valid bug id.};@assert setr(0,u(SQL`SELECT`BUGEXISTS,%0))={@nspemit %#=prefix(Bug #%0 does not exist. Please check @bugs first.,%vc,%vn)};@sql DELETE FROM %vr WHERE bug_id='[sqlescape(%0)]';@sql DELETE FROM %vx WHERE bug_id='[sqlescape(%0)]';@nspemit %#=prefix(Bug #%0 and all related comments purged from the bugs database.,%vc,%vn);@nscemit/noisy Admin=[ansi(c,Bug)] [ansi(hx,#)][ansi(hy,%0)] [ansi(c,and all related comments purged from the bugs database by )] [ansi(hy,name(%#))][ansi(c,.)]
&CMD_DETAILEDBUG $--: Bug System (Admin)=$^(@bug) (?\:(#))?(\d+)$:@assert t(setr(A,u(SQL`SELECT`GET`THISBUG,%3)))={@nspemit %#=prefix(That is not a valid bug number.,%vc,%vn)};@nspemit %#=[header(ansi(wh,%vn),[ansi(c,Bug #[extract(%qA,1,1,|)])],Detailed Bug Report,width(%#),%vc)]%r%r[align(>15 1 <20,ansi(r,Submitted By),ansi(hx,:),[name(extract(%qA,5,1,|))] \([before(extract(%qA,5,1,|),:)]\))]%r[align(>15 1 <40,ansi(r,Location),ansi(hx,:),[name(extract(%qA,6,1,|))] \([extract(%qA,6,1,|)]\))]%r[align(>15 1 <30,ansi(r,Zone),ansi(hx,:),[name(extract(%qA,7,1,|))] \([extract(%qA,7,1,|)]\))]%r[align(>15 1 <50,ansi(r,Report Filed),ansi(hx,:),[convsecs(extract(%qA,8,1,|))] \([timestring(sub(secs(),extract(%qA,8,1,|)))] ago\))]%r[align(>15 1 <60,ansi(r,Resolved),ansi(hx,:),if(extract(%qA,2,1,|),[convsecs(extract(%qA,4,1,|))] \([timestring(sub(secs(),extract(%qA,4,1,|)))] ago\) by [name(extract(%qA,3,1,|))] \([before(extract(%qA,3,1,|),:)]\),ansi(hx,<not yet resolved>)))]%r%r[header(,Description,,width(%#),%vc)]%r%r%t[u(SQL`SELECT`GET`THISBUG_DETAILS,%3)]%r%r[header(,Comments,,width(%#),%vc)]%r%r[if(u(SQL`SELECT`COMMENTSBYBUG,%3),%t[mapsql(FUN_DISPLAYCOMMENT,u(SQL`SELECT`GET`COMMENTS_BY_BUG,%3),%r%r%t)],%t[ansi(hx,<no comments>)])]%r%r[header(%?,ansi(c,u(SQL`SELECT`COMMENTSBYBUG,%3) Comments),ztime(%#),width(%#),%vc)]%r
@set $--: Bug System (Admin)/CMD_DETAILEDBUG=regexp
&CMD_RESOLVEBUG $--: Bug System (Admin)=$@bug/resolve *=*:@assert t(setr(A,u(SQL`SELECT`GET`THISBUG,%0)))={@nspemit %#=prefix(v(MSG_INVALIDBUG),%vc,%vn)};th [bugs(resolve,%0,%:,secs(),{%1})][bugs(comment,%0,%:,secs(),{%1})]
&FUN_BUGLIST $--: Bug System (Admin)=[align(>5 1 <20 <[sub(width(%#),43)] >11,[ansi(hx,#)][ansi(hr,%1)],[ansi(hx,:)],[ansi(c,name(%2))],[mid(%4,0,sub(width(%#),43))],[ansi(c,%5 comments)])]
&FUN_DISPLAYCOMMENT $--: Bug System (Admin)=align(4 1 60, [ansi(hx,#)][ansi(hr,%0)],ansi(hx,:),by [ansi(c,name(%2))] on [ansi(hw,convsecs(%3))] \([timestring(sub(secs(),%3))] ago\))%r%t%t%4
&MSG_INVALIDBUG $--: Bug System (Admin) = That is not a valid bug number.


/* Needs rewriting */

&CMD_LIMIT $--: Bug System (Admin) = $^@bug([s]?)/all(\s*)(\d*)$:th [setq(B,words(setr(A,u(SQLSelectGetAllBugs_Limited, [if(%3,dec(sub(mul(%3,%vp),dec(%vp))),0)], %vp)),^))][setq(C,ceil(fdiv(u(SQLCountAll),%vp)))][setq(D,if(%3,%3,1))];@nspemit %#=%r[header(ansi(wh,%vn),,[ansi(xh,\(+bug\/all %qD\))]%b%bComplete Bug List,width(%#),%vc)]%r%r[if(cand(%qB,lte(%qD,%qC)),[iter(%qA,[align(>5 1 <20 <[sub(width(%#),43)] >11,[ansi(hx,#)][ansi(if(extract(##,2,1,|),r,rh),extract(##,1,1,|))],ansi(hx,:),ansi(c,name(before(extract(##,3,1,|),:))),[mid(u(SQLSELECTGETTHISBUG_DESCRIPTION,extract(##,1,1,|)),0,[sub(width(%#),43)])],[ansi(c,[u(SQLSELECTCOMMENTSBYBUG,extract(##,1,1,|))] comments)])],^,%r)],%r[ansi(hx,<no bugs reported or no bugs on this page>)])]%r%r[header(%?,Total Bugs: [u(SQLCountAll)],Page [ansi(if(gt(%qD,%qC),rh,c),%qD)] of [ansi(c,%qC)],width(%#),%vc)]%r
@set $--: Bug System (Admin)/CMD_LIMIT=regexp
&CMD_RESOLVE $--: Bug System (Admin) = $@bugs/resolved:th [setq(A,u(SQLSELECTGETRESOLVEDBUGS))];@nspemit %#=[if(%qA,%r[header(ansi(wh,%vn),,Resolved Bugs List,width(%#),%vc)]%r[iter(%qA,%r[align(>5 1 <20 <20 >6 >11,[ansi(hx,#)][ansi(hr,extract(##,1,1,|))],ansi(hx,:),ansi(c,name(extract(##,2,1,|))),name(extract(##,3,1,|)),extract(##,3,1,|),[ansi(c,[u(SQLSELECTCOMMENTSBYBUG,extract(##,1,1,|))] comments)])]%r%t[extract(##,4,1,|)],~,%r)]%r%r[header(%?,Resolved Bugs: [if(%qA,words(%qA,~),0)],ztime(%#),width(%#),%vc)]%r,%r[ansi(hx,<no bugs resolved>)])]
&CMD_SHOWBYCAT $--: Bug System (Admin) = $^@bugs (\w+)$:th [setq(A,u(SQLSELECTGETCURRENTBUGSWITHCAT,%1))][nspemit(%#,[header(ansi(wh,%vn),,Condensed Bug List,width(%#),%vc)]%r)][if(%qA,[iter(%qA,[nspemit(%#,[align(>5 1 <20 <[sub(width(%#),43)] >11,[ansi(hx,#)][ansi(hr,extract(%i0,1,1,|))],ansi(hx,:),ansi(c,name(extract(%i0,2,1,|))),[mid(u(SQLSELECTGETTHISBUG_DESCRIPTION,extract(%i0,1,1,|)),0,[sub(width(%#),43)])],[ansi(c,[u(SQLSELECTCOMMENTSBYBUG,extract(%i0,1,1,|))] comments)])])],^,%r)],[nspemit(%#,[ansi(hx,<no bugs reported>)])])][nspemit(%#,%r[header(%?,Unresolved Bugs: [if(%qA,words(%qA,^),0)],ztime(%#),width(%#),%vc)])]
@set $--: Bug System (Admin)/CMD_SHOWBYCAT=regexp

/* End */


@create $--: Bug System (Player)
@parent $--: Bug System (Player)=$--:Sql Object: Bug Reporter
@lock/user:Basic $--: Bug System (Player)=#FALSE
@lset $--: Bug System (Player)/Basic=no_inherit
@set $--: Bug System (Player) = WIZARD
@set $--: Bug System (Player) = NO_LOG
@set $--: Bug System (Player) = SYSTEM
&CMD_BUG $--: Bug System (Player)=$@bug/submit *:@assert gte(words(%0),5)={@nspemit %#=prefix(Please write a more detailed description of the problem you are having.,%vc,%vn)};th[setq(2,%L)][setq(3,secs())][setq(4,timefmt($Y-$m-$d))][setq(5,%:)][setq(6,%0)][setq(7,%z#)][setq(8,secs())][setq(9,timefmt($Y-$m-$d))][u(SQL`INSERT`BUG,%q5,%q2,%q7,%q4,%q9,%q3,%q8,{[escape(%q6)]})];@nspemit %#=prefix(Bug report submitted.,%vc,%vn);@nscemit/noisy admin=%n has filed a new bug report. #[u(SQL`SELECT`GET`LASTPOST)]